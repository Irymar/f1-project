name: Deploy Docker Images to EC2 and S3

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Ensure deploy dir on EC2 exists and clean old config
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            DEPLOY_DIR="/home/ubuntu/f1-store-deploy"

            echo "üìÅ Creating deploy dir if not exists..."
            if [ ! -d "$DEPLOY_DIR" ]; then
              sudo mkdir -p $DEPLOY_DIR
            fi

            echo "‚ôªÔ∏è Removing old docker-compose.yml if exists..."
            sudo rm -rf $DEPLOY_DIR/docker-compose.yml

      - name: SCP docker-compose to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "infra/docker-compose.prod.yml"
          target: "/home/ubuntu/f1-store-deploy/docker-compose.yml"

      - name: Deploy containers on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/f1-store-deploy

            echo "üîê Creating .env..."
            echo "${{ secrets.ENV_FILE }}" | sudo tee .env > /dev/null

            echo "üê≥ Pulling Docker images..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/f1-backend-rds
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/f1-backend-redis
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/f1-frontend

            echo "üöÄ Running docker-compose..."
            sudo docker-compose -f docker-compose.yml up -d --remove-orphans

      - name: Upload frontend to S3
        run: |
          aws s3 sync ./frontend s3://${{ secrets.S3_BUCKET_NAME }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}