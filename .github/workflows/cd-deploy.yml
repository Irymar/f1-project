name: Deploy Docker Images to EC2 and S3

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: 🔐 Decode SSH key from GitHub Secret
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private.pem
          chmod 600 private.pem

      - name: 📁 Ensure EC2 deploy dir exists and clean it
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /home/${{ secrets.EC2_USER }}/f1-store-deploy
            sudo rm -rf /home/${{ secrets.EC2_USER }}/f1-store-deploy/*

      - name: 📄 Upload docker-compose.prod.yml to EC2 (temporary)
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "infra/docker-compose.prod.yml"
          target: "/tmp/f1-store-upload/"
          strip_components: 1

      - name: 🔁 Move uploaded files with sudo
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo cp -r /tmp/f1-store-upload/* /home/${{ secrets.EC2_USER }}/f1-store-deploy/
            sudo chown -R $USER:$USER /home/${{ secrets.EC2_USER }}/f1-store-deploy/

      - name: 🚀 Deploy containers via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i private.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -ex
            cd /home/${{ secrets.EC2_USER }}/f1-store-deploy

            echo "🔐 Writing .env from ENV_FILE"
            printf "%b" "${{ secrets.ENV_FILE }}" > .env

            echo "🛑 Stopping old containers..."
            docker compose -f docker-compose.prod.yml down || true

            echo "🧼 Pruning old containers..."
            docker container prune -f || true

            echo "🐳 Pulling new Docker images..."
            docker pull ivar26/f1-backend-rds
            docker pull ivar26/f1-backend-redis
            docker pull ivar26/f1-frontend

            echo "📦 Starting containers..."
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "🌐 Testing backend connection..."
            curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/test_connection/
          EOF

      - name: 📥 Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: ☁️ Deploy frontend to S3
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region "${{ secrets.AWS_REGION }}"

          echo "📤 Syncing frontend/ to S3..."
          aws s3 sync ./frontend s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: 🔁 Invalidate CloudFront cache
        run: |
          echo "🧊 Invalidating CloudFront..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} \
            --paths "/*"
